
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AddressesScalarFieldEnum = {
  id: 'id',
  owner_id: 'owner_id',
  owner_type: 'owner_type',
  address1: 'address1',
  address2: 'address2',
  country_id: 'country_id',
  state_id: 'state_id',
  city_id: 'city_id',
  postal_code: 'postal_code',
  other_region_code: 'other_region_code',
  other_contact: 'other_contact',
  other_address1: 'other_address1',
  other_address2: 'other_address2',
  other_country_id: 'other_country_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Appointment_google_calendarsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  google_calendar_list_id: 'google_calendar_list_id',
  google_calendar_id: 'google_calendar_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.AppointmentsScalarFieldEnum = {
  id: 'id',
  doctor_id: 'doctor_id',
  patient_id: 'patient_id',
  date: 'date',
  from_time: 'from_time',
  from_time_type: 'from_time_type',
  to_time: 'to_time',
  to_time_type: 'to_time_type',
  status: 'status',
  description: 'description',
  service_id: 'service_id',
  region_code: 'region_code',
  contact: 'contact',
  id_type: 'id_type',
  id_number: 'id_number',
  dob: 'dob',
  age: 'age',
  payable_amount: 'payable_amount',
  payment_type: 'payment_type',
  payment_method: 'payment_method',
  appointment_unique_id: 'appointment_unique_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  patient_name: 'patient_name',
  clinic_id: 'clinic_id'
};

exports.Prisma.BrandsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  created_at: 'created_at',
  updated_at: 'updated_at',
  address: 'address',
  contact_person: 'contact_person',
  payment_terms: 'payment_terms',
  website: 'website',
  comment: 'comment',
  clinic_id: 'clinic_id'
};

exports.Prisma.CategoriesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at',
  clinic_id: 'clinic_id'
};

exports.Prisma.ChainScalarFieldEnum = {
  id: 'id',
  name: 'name',
  phone: 'phone',
  default: 'default',
  code: 'code',
  landing_name: 'landing_name',
  region_code: 'region_code',
  email: 'email',
  social_link: 'social_link',
  country_id: 'country_id',
  type: 'type',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CitiesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  state_id: 'state_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Clinic_chain_groupsScalarFieldEnum = {
  id: 'id',
  clinic_chain_id: 'clinic_chain_id',
  clinic_id: 'clinic_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Clinic_chainsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Clinic_document_settingScalarFieldEnum = {
  id: 'id',
  header: 'header',
  created_at: 'created_at',
  updated_at: 'updated_at',
  transaction_receipt_template: 'transaction_receipt_template',
  medical_certificate_template: 'medical_certificate_template',
  transaction_invoice_template: 'transaction_invoice_template',
  clinic_id: 'clinic_id'
};

exports.Prisma.Clinic_schedulesScalarFieldEnum = {
  id: 'id',
  day_of_week: 'day_of_week',
  start_time: 'start_time',
  end_time: 'end_time',
  created_at: 'created_at',
  updated_at: 'updated_at',
  clinic_id: 'clinic_id'
};

exports.Prisma.Clinic_servicesScalarFieldEnum = {
  id: 'id',
  category: 'category',
  name: 'name',
  description: 'description',
  price: 'price',
  cost: 'cost',
  currency_id: 'currency_id',
  active: 'active',
  created_at: 'created_at',
  updated_at: 'updated_at',
  clinic_id: 'clinic_id'
};

exports.Prisma.ClinicsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  phone: 'phone',
  default: 'default',
  created_at: 'created_at',
  updated_at: 'updated_at',
  code: 'code',
  landing_name: 'landing_name',
  region_code: 'region_code',
  email: 'email',
  social_link: 'social_link',
  country_id: 'country_id',
  type: 'type'
};

exports.Prisma.CountriesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  short_code: 'short_code',
  phone_code: 'phone_code',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CurrenciesScalarFieldEnum = {
  id: 'id',
  currency_name: 'currency_name',
  currency_icon: 'currency_icon',
  currency_code: 'currency_code',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Doctor_holidaysScalarFieldEnum = {
  id: 'id',
  name: 'name',
  doctor_id: 'doctor_id',
  date: 'date',
  created_at: 'created_at',
  updated_at: 'updated_at',
  clinic_id: 'clinic_id'
};

exports.Prisma.Doctor_sessionsScalarFieldEnum = {
  id: 'id',
  doctor_id: 'doctor_id',
  session_meeting_time: 'session_meeting_time',
  session_gap: 'session_gap',
  created_at: 'created_at',
  updated_at: 'updated_at',
  clinic_id: 'clinic_id'
};

exports.Prisma.Doctor_specializationScalarFieldEnum = {
  id: 'id',
  doctor_id: 'doctor_id',
  specialization_id: 'specialization_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.DoctorsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  experience: 'experience',
  twitter_url: 'twitter_url',
  linkedin_url: 'linkedin_url',
  instagram_url: 'instagram_url',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.EnquiriesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  subject: 'subject',
  message: 'message',
  created_at: 'created_at',
  updated_at: 'updated_at',
  view: 'view',
  region_code: 'region_code',
  clinic_id: 'clinic_id'
};

exports.Prisma.Failed_jobsScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  connection: 'connection',
  queue: 'queue',
  payload: 'payload',
  exception: 'exception',
  failed_at: 'failed_at'
};

exports.Prisma.FaqsScalarFieldEnum = {
  id: 'id',
  question: 'question',
  answer: 'answer',
  is_default: 'is_default',
  created_at: 'created_at',
  updated_at: 'updated_at',
  clinic_id: 'clinic_id'
};

exports.Prisma.FrequenciesScalarFieldEnum = {
  id: 'id',
  frequency: 'frequency',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Front_patient_testimonialsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  designation: 'designation',
  short_description: 'short_description',
  is_default: 'is_default',
  created_at: 'created_at',
  updated_at: 'updated_at',
  clinic_id: 'clinic_id'
};

exports.Prisma.Google_calendar_integrationsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  access_token: 'access_token',
  meta: 'meta',
  last_used_at: 'last_used_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Google_calendar_listsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  calendar_name: 'calendar_name',
  google_calendar_id: 'google_calendar_id',
  meta: 'meta',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.LabelsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  created_at: 'created_at',
  updated_at: 'updated_at',
  clinic_id: 'clinic_id'
};

exports.Prisma.Live_consultationsScalarFieldEnum = {
  id: 'id',
  doctor_id: 'doctor_id',
  patient_id: 'patient_id',
  consultation_title: 'consultation_title',
  consultation_date: 'consultation_date',
  host_video: 'host_video',
  participant_video: 'participant_video',
  consultation_duration_minutes: 'consultation_duration_minutes',
  created_by: 'created_by',
  status: 'status',
  description: 'description',
  meeting_id: 'meeting_id',
  meta: 'meta',
  time_zone: 'time_zone',
  password: 'password',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.MediaScalarFieldEnum = {
  id: 'id',
  model_type: 'model_type',
  model_id: 'model_id',
  uuid: 'uuid',
  collection_name: 'collection_name',
  name: 'name',
  file_name: 'file_name',
  mime_type: 'mime_type',
  disk: 'disk',
  conversions_disk: 'conversions_disk',
  size: 'size',
  manipulations: 'manipulations',
  custom_properties: 'custom_properties',
  generated_conversions: 'generated_conversions',
  responsive_images: 'responsive_images',
  order_column: 'order_column',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Medicine_billsScalarFieldEnum = {
  id: 'id',
  bill_number: 'bill_number',
  patient_id: 'patient_id',
  doctor_id: 'doctor_id',
  model_type: 'model_type',
  model_id: 'model_id',
  discount: 'discount',
  net_amount: 'net_amount',
  total: 'total',
  tax_amount: 'tax_amount',
  payment_status: 'payment_status',
  payment_type: 'payment_type',
  note: 'note',
  bill_date: 'bill_date',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Medicine_inventoriesScalarFieldEnum = {
  id: 'id',
  medicine_id: 'medicine_id',
  quantity: 'quantity',
  bonus: 'bonus',
  price: 'price',
  cost_per_unit: 'cost_per_unit',
  batch_number: 'batch_number',
  type: 'type',
  description: 'description',
  expiration_date: 'expiration_date',
  created_at: 'created_at',
  updated_at: 'updated_at',
  available_quantity: 'available_quantity',
  uom: 'uom'
};

exports.Prisma.Medicine_inventory_usagesScalarFieldEnum = {
  id: 'id',
  medicine_inventory_id: 'medicine_inventory_id',
  quantity: 'quantity',
  type: 'type',
  description: 'description',
  created_at: 'created_at',
  updated_at: 'updated_at',
  transaction_invoice_id: 'transaction_invoice_id'
};

exports.Prisma.Medicine_typesScalarFieldEnum = {
  id: 'id',
  type: 'type',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.MedicinesScalarFieldEnum = {
  id: 'id',
  category_id: 'category_id',
  category_ids: 'category_ids',
  brand_id: 'brand_id',
  brand_ids: 'brand_ids',
  name: 'name',
  selling_price: 'selling_price',
  buying_price: 'buying_price',
  quantity: 'quantity',
  available_quantity: 'available_quantity',
  salt_composition: 'salt_composition',
  description: 'description',
  side_effects: 'side_effects',
  comment: 'comment',
  type: 'type',
  code: 'code',
  default_dispense: 'default_dispense',
  uom: 'uom',
  dosage: 'dosage',
  frequency: 'frequency',
  purpose: 'purpose',
  administration: 'administration',
  packing: 'packing',
  inventory_image: 'inventory_image',
  currency_symbol: 'currency_symbol',
  created_at: 'created_at',
  updated_at: 'updated_at',
  low_stock_level: 'low_stock_level',
  reorder_level: 'reorder_level',
  expiration_warning: 'expiration_warning',
  first_expiration_date: 'first_expiration_date',
  active: 'active',
  clinic_id: 'clinic_id'
};

exports.Prisma.MigrationsScalarFieldEnum = {
  id: 'id',
  migration: 'migration',
  batch: 'batch'
};

exports.Prisma.Model_has_permissionsScalarFieldEnum = {
  permission_id: 'permission_id',
  model_type: 'model_type',
  model_id: 'model_id'
};

exports.Prisma.Model_has_rolesScalarFieldEnum = {
  role_id: 'role_id',
  model_type: 'model_type',
  model_id: 'model_id'
};

exports.Prisma.NotificationsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  type: 'type',
  read_at: 'read_at',
  user_id: 'user_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Patient_medical_record_blood_pressuresScalarFieldEnum = {
  id: 'id',
  patient_medical_record_id: 'patient_medical_record_id',
  bp_systolic: 'bp_systolic',
  bp_diastolic: 'bp_diastolic',
  date: 'date',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Patient_medical_record_documentsScalarFieldEnum = {
  id: 'id',
  patient_medical_record_id: 'patient_medical_record_id',
  path: 'path',
  type: 'type',
  file_name: 'file_name',
  title: 'title',
  category_id: 'category_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Patient_medical_record_historiesScalarFieldEnum = {
  id: 'id',
  patient_medical_record_id: 'patient_medical_record_id',
  created_by: 'created_by',
  type: 'type',
  data: 'data',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Patient_medical_record_pulse_ratesScalarFieldEnum = {
  id: 'id',
  patient_medical_record_id: 'patient_medical_record_id',
  pulse: 'pulse',
  date: 'date',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Patient_medical_record_temperaturesScalarFieldEnum = {
  id: 'id',
  patient_medical_record_id: 'patient_medical_record_id',
  temperature: 'temperature',
  date: 'date',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Patient_medical_record_weightsScalarFieldEnum = {
  id: 'id',
  patient_medical_record_id: 'patient_medical_record_id',
  weight: 'weight',
  date: 'date',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Patient_medical_recordsScalarFieldEnum = {
  id: 'id',
  patient_id: 'patient_id',
  allergy: 'allergy',
  important_notes: 'important_notes',
  notes: 'notes',
  created_at: 'created_at',
  updated_at: 'updated_at',
  notes_updated_at: 'notes_updated_at',
  diagnosis: 'diagnosis',
  changed: 'changed',
  clinic_id: 'clinic_id'
};

exports.Prisma.PatientsScalarFieldEnum = {
  id: 'id',
  patient_unique_id: 'patient_unique_id',
  patient_mrn: 'patient_mrn',
  user_id: 'user_id',
  template_id: 'template_id',
  qr_code: 'qr_code',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Payment_gatewaysScalarFieldEnum = {
  id: 'id',
  payment_gateway_id: 'payment_gateway_id',
  payment_gateway: 'payment_gateway',
  created_at: 'created_at',
  updated_at: 'updated_at',
  clinic_id: 'clinic_id'
};

exports.Prisma.PermissionsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  display_name: 'display_name',
  guard_name: 'guard_name',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.PrescriptionsScalarFieldEnum = {
  id: 'id',
  appointment_id: 'appointment_id',
  patient_id: 'patient_id',
  doctor_id: 'doctor_id',
  food_allergies: 'food_allergies',
  tendency_bleed: 'tendency_bleed',
  heart_disease: 'heart_disease',
  high_blood_pressure: 'high_blood_pressure',
  diabetic: 'diabetic',
  surgery: 'surgery',
  accident: 'accident',
  others: 'others',
  medical_history: 'medical_history',
  current_medication: 'current_medication',
  female_pregnancy: 'female_pregnancy',
  breast_feeding: 'breast_feeding',
  health_insurance: 'health_insurance',
  low_income: 'low_income',
  reference: 'reference',
  status: 'status',
  plus_rate: 'plus_rate',
  temperature: 'temperature',
  problem_description: 'problem_description',
  test: 'test',
  advice: 'advice',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Prescriptions_medicinesScalarFieldEnum = {
  id: 'id',
  prescription_id: 'prescription_id',
  medicine: 'medicine',
  dosage: 'dosage',
  day: 'day',
  dose_interval: 'dose_interval',
  time: 'time',
  comment: 'comment',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Purchase_medicinesScalarFieldEnum = {
  id: 'id',
  purchase_no: 'purchase_no',
  tax: 'tax',
  total: 'total',
  net_amount: 'net_amount',
  payment_type: 'payment_type',
  discount: 'discount',
  note: 'note',
  payment_note: 'payment_note',
  created_at: 'created_at',
  updated_at: 'updated_at',
  brand_id: 'brand_id',
  shipping_fee: 'shipping_fee',
  clinic_id: 'clinic_id'
};

exports.Prisma.Purchased_medicinesScalarFieldEnum = {
  id: 'id',
  purchase_medicines_id: 'purchase_medicines_id',
  medicine_id: 'medicine_id',
  expiry_date: 'expiry_date',
  lot_no: 'lot_no',
  tax: 'tax',
  quantity: 'quantity',
  amount: 'amount',
  created_at: 'created_at',
  updated_at: 'updated_at',
  label_id: 'label_id'
};

exports.Prisma.QualificationsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  degree: 'degree',
  university: 'university',
  year: 'year',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ReviewsScalarFieldEnum = {
  id: 'id',
  patient_id: 'patient_id',
  doctor_id: 'doctor_id',
  review: 'review',
  rating: 'rating',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.RolesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  display_name: 'display_name',
  is_default: 'is_default',
  guard_name: 'guard_name',
  created_at: 'created_at',
  updated_at: 'updated_at',
  clinic_id: 'clinic_id'
};

exports.Prisma.Sale_medicinesScalarFieldEnum = {
  id: 'id',
  medicine_bill_id: 'medicine_bill_id',
  medicine_id: 'medicine_id',
  sale_quantity: 'sale_quantity',
  sale_price: 'sale_price',
  tax: 'tax',
  expiry_date: 'expiry_date',
  amount: 'amount',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Service_categoriesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  created_at: 'created_at',
  updated_at: 'updated_at',
  clinic_id: 'clinic_id'
};

exports.Prisma.Service_doctorScalarFieldEnum = {
  id: 'id',
  service_id: 'service_id',
  doctor_id: 'doctor_id'
};

exports.Prisma.ServicesScalarFieldEnum = {
  id: 'id',
  category_id: 'category_id',
  name: 'name',
  charges: 'charges',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at',
  short_description: 'short_description',
  clinic_id: 'clinic_id'
};

exports.Prisma.Session_week_daysScalarFieldEnum = {
  id: 'id',
  doctor_id: 'doctor_id',
  doctor_session_id: 'doctor_session_id',
  day_of_week: 'day_of_week',
  start_time: 'start_time',
  end_time: 'end_time',
  start_time_type: 'start_time_type',
  end_time_type: 'end_time_type',
  created_at: 'created_at',
  updated_at: 'updated_at',
  clinic_id: 'clinic_id'
};

exports.Prisma.SettingsScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  created_at: 'created_at',
  updated_at: 'updated_at',
  clinic_id: 'clinic_id'
};

exports.Prisma.SlidersScalarFieldEnum = {
  id: 'id',
  title: 'title',
  short_description: 'short_description',
  is_default: 'is_default',
  created_at: 'created_at',
  updated_at: 'updated_at',
  clinic_id: 'clinic_id'
};

exports.Prisma.Smart_patient_cardsScalarFieldEnum = {
  id: 'id',
  template_name: 'template_name',
  address: 'address',
  header_color: 'header_color',
  show_email: 'show_email',
  show_phone: 'show_phone',
  show_dob: 'show_dob',
  show_blood_group: 'show_blood_group',
  show_address: 'show_address',
  show_patient_unique_id: 'show_patient_unique_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  clinic_id: 'clinic_id'
};

exports.Prisma.SpecializationsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  created_at: 'created_at',
  updated_at: 'updated_at',
  clinic_id: 'clinic_id'
};

exports.Prisma.StatesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  country_id: 'country_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SubscribesScalarFieldEnum = {
  id: 'id',
  email: 'email',
  subscribe: 'subscribe',
  created_at: 'created_at',
  updated_at: 'updated_at',
  clinic_id: 'clinic_id'
};

exports.Prisma.Transaction_invoice_receiptsScalarFieldEnum = {
  id: 'id',
  transaction_invoice_id: 'transaction_invoice_id',
  receipt_number: 'receipt_number',
  service_amount: 'service_amount',
  inventory_amount: 'inventory_amount',
  amount: 'amount',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Transaction_invoice_servicesScalarFieldEnum = {
  id: 'id',
  transaction_invoice_id: 'transaction_invoice_id',
  service_id: 'service_id',
  type: 'type',
  name: 'name',
  description: 'description',
  quantity: 'quantity',
  price: 'price',
  discount: 'discount',
  sub_total: 'sub_total',
  uom: 'uom',
  dosage: 'dosage',
  frequency: 'frequency',
  administration: 'administration',
  purpose: 'purpose',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Transaction_invoicesScalarFieldEnum = {
  id: 'id',
  doctor_id: 'doctor_id',
  user_id: 'user_id',
  invoice_number: 'invoice_number',
  important_notes: 'important_notes',
  tax: 'tax',
  total: 'total',
  net_amount: 'net_amount',
  discount: 'discount',
  payment_type: 'payment_type',
  status: 'status',
  note: 'note',
  payment_note: 'payment_note',
  bill_date: 'bill_date',
  created_at: 'created_at',
  updated_at: 'updated_at',
  visit_id: 'visit_id',
  clinic_id: 'clinic_id'
};

exports.Prisma.Transaction_medical_certificatesScalarFieldEnum = {
  id: 'id',
  transaction_invoice_id: 'transaction_invoice_id',
  doctor_ids: 'doctor_ids',
  reason: 'reason',
  description: 'description',
  type: 'type',
  start_date: 'start_date',
  end_date: 'end_date',
  start_time: 'start_time',
  end_time: 'end_time',
  created_at: 'created_at',
  updated_at: 'updated_at',
  doctor_id: 'doctor_id',
  certificate_number: 'certificate_number'
};

exports.Prisma.TransactionsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  transaction_id: 'transaction_id',
  appointment_id: 'appointment_id',
  amount: 'amount',
  type: 'type',
  status: 'status',
  accepted_by: 'accepted_by',
  meta: 'meta',
  created_at: 'created_at',
  updated_at: 'updated_at',
  user_name: 'user_name'
};

exports.Prisma.UnitsScalarFieldEnum = {
  id: 'id',
  unit: 'unit',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Used_medicinesScalarFieldEnum = {
  id: 'id',
  stock_used: 'stock_used',
  medicine_id: 'medicine_id',
  model_id: 'model_id',
  model_type: 'model_type',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.User_clinicsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  clinic_id: 'clinic_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.User_google_appointmentsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  appointment_id: 'appointment_id',
  google_calendar_id: 'google_calendar_id',
  google_event_id: 'google_event_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.User_zoom_credentialScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  zoom_api_key: 'zoom_api_key',
  zoom_api_secret: 'zoom_api_secret',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  first_name: 'first_name',
  last_name: 'last_name',
  email: 'email',
  contact: 'contact',
  dob: 'dob',
  gender: 'gender',
  status: 'status',
  language: 'language',
  email_verified_at: 'email_verified_at',
  password: 'password',
  type: 'type',
  blood_group: 'blood_group',
  G6PD: 'G6PD',
  allergy: 'allergy',
  food_allergy: 'food_allergy',
  region_code: 'region_code',
  marital_status: 'marital_status',
  race: 'race',
  ethnicity: 'ethnicity',
  id_type: 'id_type',
  id_number: 'id_number',
  nationality: 'nationality',
  religion: 'religion',
  remember_token: 'remember_token',
  created_at: 'created_at',
  updated_at: 'updated_at',
  email_notification: 'email_notification',
  time_zone: 'time_zone',
  dark_mode: 'dark_mode',
  important_notes: 'important_notes',
  clinic_id: 'clinic_id',
  show_all_data: 'show_all_data',
  clinic_chain_id: 'clinic_chain_id'
};

exports.Prisma.Visit_notesScalarFieldEnum = {
  id: 'id',
  note_name: 'note_name',
  visit_id: 'visit_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Visit_observationsScalarFieldEnum = {
  id: 'id',
  observation_name: 'observation_name',
  visit_id: 'visit_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Visit_prescriptionsScalarFieldEnum = {
  id: 'id',
  visit_id: 'visit_id',
  prescription_name: 'prescription_name',
  frequency: 'frequency',
  duration: 'duration',
  description: 'description',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Visit_problemsScalarFieldEnum = {
  id: 'id',
  problem_name: 'problem_name',
  visit_id: 'visit_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.VisitsScalarFieldEnum = {
  id: 'id',
  visit_date: 'visit_date',
  visit_type: 'visit_type',
  doctor_id: 'doctor_id',
  patient_id: 'patient_id',
  description: 'description',
  id_type: 'id_type',
  id_number: 'id_number',
  dob: 'dob',
  age: 'age',
  region_code: 'region_code',
  contact_no: 'contact_no',
  created_at: 'created_at',
  updated_at: 'updated_at',
  important_notes: 'important_notes',
  encounter_id: 'encounter_id',
  deleted_at: 'deleted_at',
  status: 'status',
  appointment_id: 'appointment_id',
  checkout_date: 'checkout_date',
  clinic_id: 'clinic_id'
};

exports.Prisma.Zoom_o_auth_credentialsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  access_token: 'access_token',
  refresh_token: 'refresh_token',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.addressesOrderByRelevanceFieldEnum = {
  owner_type: 'owner_type',
  address1: 'address1',
  address2: 'address2',
  postal_code: 'postal_code',
  other_region_code: 'other_region_code',
  other_contact: 'other_contact',
  other_address1: 'other_address1',
  other_address2: 'other_address2',
  other_country_id: 'other_country_id'
};

exports.Prisma.appointment_google_calendarsOrderByRelevanceFieldEnum = {
  google_calendar_id: 'google_calendar_id'
};

exports.Prisma.appointmentsOrderByRelevanceFieldEnum = {
  date: 'date',
  from_time: 'from_time',
  from_time_type: 'from_time_type',
  to_time: 'to_time',
  to_time_type: 'to_time_type',
  description: 'description',
  region_code: 'region_code',
  contact: 'contact',
  id_type: 'id_type',
  id_number: 'id_number',
  dob: 'dob',
  age: 'age',
  payable_amount: 'payable_amount',
  appointment_unique_id: 'appointment_unique_id',
  patient_name: 'patient_name'
};

exports.Prisma.brandsOrderByRelevanceFieldEnum = {
  name: 'name',
  email: 'email',
  phone: 'phone',
  address: 'address',
  contact_person: 'contact_person',
  payment_terms: 'payment_terms',
  website: 'website',
  comment: 'comment'
};

exports.Prisma.categoriesOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.chainOrderByRelevanceFieldEnum = {
  name: 'name',
  phone: 'phone',
  code: 'code',
  landing_name: 'landing_name',
  region_code: 'region_code',
  email: 'email',
  social_link: 'social_link'
};

exports.Prisma.citiesOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.clinic_chainsOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.clinic_document_settingOrderByRelevanceFieldEnum = {
  header: 'header',
  transaction_receipt_template: 'transaction_receipt_template',
  medical_certificate_template: 'medical_certificate_template',
  transaction_invoice_template: 'transaction_invoice_template'
};

exports.Prisma.clinic_schedulesOrderByRelevanceFieldEnum = {
  day_of_week: 'day_of_week',
  start_time: 'start_time',
  end_time: 'end_time'
};

exports.Prisma.clinic_servicesOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description'
};

exports.Prisma.clinicsOrderByRelevanceFieldEnum = {
  name: 'name',
  phone: 'phone',
  code: 'code',
  landing_name: 'landing_name',
  region_code: 'region_code',
  email: 'email',
  social_link: 'social_link'
};

exports.Prisma.countriesOrderByRelevanceFieldEnum = {
  name: 'name',
  short_code: 'short_code',
  phone_code: 'phone_code'
};

exports.Prisma.currenciesOrderByRelevanceFieldEnum = {
  currency_name: 'currency_name',
  currency_icon: 'currency_icon',
  currency_code: 'currency_code'
};

exports.Prisma.doctor_holidaysOrderByRelevanceFieldEnum = {
  name: 'name',
  date: 'date'
};

exports.Prisma.doctor_sessionsOrderByRelevanceFieldEnum = {
  session_gap: 'session_gap'
};

exports.Prisma.doctorsOrderByRelevanceFieldEnum = {
  twitter_url: 'twitter_url',
  linkedin_url: 'linkedin_url',
  instagram_url: 'instagram_url'
};

exports.Prisma.enquiriesOrderByRelevanceFieldEnum = {
  name: 'name',
  email: 'email',
  phone: 'phone',
  subject: 'subject',
  message: 'message',
  region_code: 'region_code'
};

exports.Prisma.failed_jobsOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  connection: 'connection',
  queue: 'queue',
  payload: 'payload',
  exception: 'exception'
};

exports.Prisma.faqsOrderByRelevanceFieldEnum = {
  question: 'question',
  answer: 'answer'
};

exports.Prisma.frequenciesOrderByRelevanceFieldEnum = {
  frequency: 'frequency'
};

exports.Prisma.front_patient_testimonialsOrderByRelevanceFieldEnum = {
  name: 'name',
  designation: 'designation',
  short_description: 'short_description'
};

exports.Prisma.google_calendar_integrationsOrderByRelevanceFieldEnum = {
  access_token: 'access_token',
  meta: 'meta',
  last_used_at: 'last_used_at'
};

exports.Prisma.google_calendar_listsOrderByRelevanceFieldEnum = {
  calendar_name: 'calendar_name',
  google_calendar_id: 'google_calendar_id',
  meta: 'meta'
};

exports.Prisma.labelsOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.live_consultationsOrderByRelevanceFieldEnum = {
  consultation_title: 'consultation_title',
  consultation_duration_minutes: 'consultation_duration_minutes',
  created_by: 'created_by',
  description: 'description',
  meeting_id: 'meeting_id',
  meta: 'meta',
  time_zone: 'time_zone',
  password: 'password'
};

exports.Prisma.mediaOrderByRelevanceFieldEnum = {
  model_type: 'model_type',
  uuid: 'uuid',
  collection_name: 'collection_name',
  name: 'name',
  file_name: 'file_name',
  mime_type: 'mime_type',
  disk: 'disk',
  conversions_disk: 'conversions_disk',
  manipulations: 'manipulations',
  custom_properties: 'custom_properties',
  generated_conversions: 'generated_conversions',
  responsive_images: 'responsive_images'
};

exports.Prisma.medicine_billsOrderByRelevanceFieldEnum = {
  bill_number: 'bill_number',
  model_type: 'model_type',
  model_id: 'model_id',
  note: 'note'
};

exports.Prisma.medicine_inventoriesOrderByRelevanceFieldEnum = {
  bonus: 'bonus',
  batch_number: 'batch_number',
  description: 'description',
  uom: 'uom'
};

exports.Prisma.medicine_inventory_usagesOrderByRelevanceFieldEnum = {
  description: 'description'
};

exports.Prisma.medicine_typesOrderByRelevanceFieldEnum = {
  type: 'type'
};

exports.Prisma.medicinesOrderByRelevanceFieldEnum = {
  category_ids: 'category_ids',
  brand_ids: 'brand_ids',
  name: 'name',
  salt_composition: 'salt_composition',
  description: 'description',
  side_effects: 'side_effects',
  comment: 'comment',
  type: 'type',
  code: 'code',
  default_dispense: 'default_dispense',
  uom: 'uom',
  dosage: 'dosage',
  frequency: 'frequency',
  purpose: 'purpose',
  administration: 'administration',
  packing: 'packing',
  inventory_image: 'inventory_image',
  currency_symbol: 'currency_symbol'
};

exports.Prisma.migrationsOrderByRelevanceFieldEnum = {
  migration: 'migration'
};

exports.Prisma.model_has_permissionsOrderByRelevanceFieldEnum = {
  model_type: 'model_type'
};

exports.Prisma.model_has_rolesOrderByRelevanceFieldEnum = {
  model_type: 'model_type'
};

exports.Prisma.notificationsOrderByRelevanceFieldEnum = {
  title: 'title',
  type: 'type'
};

exports.Prisma.patient_medical_record_documentsOrderByRelevanceFieldEnum = {
  path: 'path',
  type: 'type',
  file_name: 'file_name',
  title: 'title'
};

exports.Prisma.patient_medical_record_historiesOrderByRelevanceFieldEnum = {
  data: 'data'
};

exports.Prisma.patient_medical_recordsOrderByRelevanceFieldEnum = {
  allergy: 'allergy',
  important_notes: 'important_notes',
  notes: 'notes',
  diagnosis: 'diagnosis'
};

exports.Prisma.patientsOrderByRelevanceFieldEnum = {
  patient_unique_id: 'patient_unique_id',
  patient_mrn: 'patient_mrn',
  qr_code: 'qr_code'
};

exports.Prisma.payment_gatewaysOrderByRelevanceFieldEnum = {
  payment_gateway: 'payment_gateway'
};

exports.Prisma.permissionsOrderByRelevanceFieldEnum = {
  name: 'name',
  display_name: 'display_name',
  guard_name: 'guard_name'
};

exports.Prisma.prescriptionsOrderByRelevanceFieldEnum = {
  food_allergies: 'food_allergies',
  tendency_bleed: 'tendency_bleed',
  heart_disease: 'heart_disease',
  high_blood_pressure: 'high_blood_pressure',
  diabetic: 'diabetic',
  surgery: 'surgery',
  accident: 'accident',
  others: 'others',
  medical_history: 'medical_history',
  current_medication: 'current_medication',
  female_pregnancy: 'female_pregnancy',
  breast_feeding: 'breast_feeding',
  health_insurance: 'health_insurance',
  low_income: 'low_income',
  reference: 'reference',
  plus_rate: 'plus_rate',
  temperature: 'temperature',
  problem_description: 'problem_description',
  test: 'test',
  advice: 'advice'
};

exports.Prisma.prescriptions_medicinesOrderByRelevanceFieldEnum = {
  dosage: 'dosage',
  day: 'day',
  time: 'time',
  comment: 'comment'
};

exports.Prisma.purchase_medicinesOrderByRelevanceFieldEnum = {
  purchase_no: 'purchase_no',
  note: 'note',
  payment_note: 'payment_note'
};

exports.Prisma.purchased_medicinesOrderByRelevanceFieldEnum = {
  lot_no: 'lot_no'
};

exports.Prisma.qualificationsOrderByRelevanceFieldEnum = {
  degree: 'degree',
  university: 'university',
  year: 'year'
};

exports.Prisma.reviewsOrderByRelevanceFieldEnum = {
  review: 'review'
};

exports.Prisma.rolesOrderByRelevanceFieldEnum = {
  name: 'name',
  display_name: 'display_name',
  guard_name: 'guard_name'
};

exports.Prisma.service_categoriesOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.servicesOrderByRelevanceFieldEnum = {
  name: 'name',
  short_description: 'short_description'
};

exports.Prisma.session_week_daysOrderByRelevanceFieldEnum = {
  day_of_week: 'day_of_week',
  start_time: 'start_time',
  end_time: 'end_time',
  start_time_type: 'start_time_type',
  end_time_type: 'end_time_type'
};

exports.Prisma.settingsOrderByRelevanceFieldEnum = {
  key: 'key',
  value: 'value'
};

exports.Prisma.slidersOrderByRelevanceFieldEnum = {
  title: 'title',
  short_description: 'short_description'
};

exports.Prisma.smart_patient_cardsOrderByRelevanceFieldEnum = {
  template_name: 'template_name',
  address: 'address',
  header_color: 'header_color'
};

exports.Prisma.specializationsOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.statesOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.subscribesOrderByRelevanceFieldEnum = {
  email: 'email'
};

exports.Prisma.transaction_invoice_receiptsOrderByRelevanceFieldEnum = {
  receipt_number: 'receipt_number'
};

exports.Prisma.transaction_invoice_servicesOrderByRelevanceFieldEnum = {
  type: 'type',
  name: 'name',
  description: 'description',
  uom: 'uom',
  dosage: 'dosage',
  frequency: 'frequency',
  administration: 'administration',
  purpose: 'purpose'
};

exports.Prisma.transaction_invoicesOrderByRelevanceFieldEnum = {
  invoice_number: 'invoice_number',
  important_notes: 'important_notes',
  note: 'note',
  payment_note: 'payment_note'
};

exports.Prisma.transaction_medical_certificatesOrderByRelevanceFieldEnum = {
  doctor_ids: 'doctor_ids',
  reason: 'reason',
  description: 'description',
  start_time: 'start_time',
  end_time: 'end_time',
  certificate_number: 'certificate_number'
};

exports.Prisma.transactionsOrderByRelevanceFieldEnum = {
  transaction_id: 'transaction_id',
  appointment_id: 'appointment_id',
  meta: 'meta',
  user_name: 'user_name'
};

exports.Prisma.unitsOrderByRelevanceFieldEnum = {
  unit: 'unit'
};

exports.Prisma.used_medicinesOrderByRelevanceFieldEnum = {
  model_type: 'model_type'
};

exports.Prisma.user_google_appointmentsOrderByRelevanceFieldEnum = {
  appointment_id: 'appointment_id',
  google_calendar_id: 'google_calendar_id',
  google_event_id: 'google_event_id'
};

exports.Prisma.user_zoom_credentialOrderByRelevanceFieldEnum = {
  zoom_api_key: 'zoom_api_key',
  zoom_api_secret: 'zoom_api_secret'
};

exports.Prisma.usersOrderByRelevanceFieldEnum = {
  first_name: 'first_name',
  last_name: 'last_name',
  email: 'email',
  contact: 'contact',
  dob: 'dob',
  language: 'language',
  password: 'password',
  blood_group: 'blood_group',
  G6PD: 'G6PD',
  allergy: 'allergy',
  food_allergy: 'food_allergy',
  region_code: 'region_code',
  marital_status: 'marital_status',
  race: 'race',
  ethnicity: 'ethnicity',
  id_type: 'id_type',
  id_number: 'id_number',
  nationality: 'nationality',
  religion: 'religion',
  remember_token: 'remember_token',
  time_zone: 'time_zone',
  important_notes: 'important_notes'
};

exports.Prisma.visit_notesOrderByRelevanceFieldEnum = {
  note_name: 'note_name'
};

exports.Prisma.visit_observationsOrderByRelevanceFieldEnum = {
  observation_name: 'observation_name'
};

exports.Prisma.visit_prescriptionsOrderByRelevanceFieldEnum = {
  prescription_name: 'prescription_name',
  frequency: 'frequency',
  duration: 'duration',
  description: 'description'
};

exports.Prisma.visit_problemsOrderByRelevanceFieldEnum = {
  problem_name: 'problem_name'
};

exports.Prisma.visitsOrderByRelevanceFieldEnum = {
  visit_date: 'visit_date',
  visit_type: 'visit_type',
  description: 'description',
  dob: 'dob',
  region_code: 'region_code',
  contact_no: 'contact_no',
  important_notes: 'important_notes',
  encounter_id: 'encounter_id',
  checkout_date: 'checkout_date'
};

exports.Prisma.zoom_o_auth_credentialsOrderByRelevanceFieldEnum = {
  access_token: 'access_token',
  refresh_token: 'refresh_token'
};


exports.Prisma.ModelName = {
  addresses: 'addresses',
  appointment_google_calendars: 'appointment_google_calendars',
  appointments: 'appointments',
  brands: 'brands',
  categories: 'categories',
  chain: 'chain',
  cities: 'cities',
  clinic_chain_groups: 'clinic_chain_groups',
  clinic_chains: 'clinic_chains',
  clinic_document_setting: 'clinic_document_setting',
  clinic_schedules: 'clinic_schedules',
  clinic_services: 'clinic_services',
  clinics: 'clinics',
  countries: 'countries',
  currencies: 'currencies',
  doctor_holidays: 'doctor_holidays',
  doctor_sessions: 'doctor_sessions',
  doctor_specialization: 'doctor_specialization',
  doctors: 'doctors',
  enquiries: 'enquiries',
  failed_jobs: 'failed_jobs',
  faqs: 'faqs',
  frequencies: 'frequencies',
  front_patient_testimonials: 'front_patient_testimonials',
  google_calendar_integrations: 'google_calendar_integrations',
  google_calendar_lists: 'google_calendar_lists',
  labels: 'labels',
  live_consultations: 'live_consultations',
  media: 'media',
  medicine_bills: 'medicine_bills',
  medicine_inventories: 'medicine_inventories',
  medicine_inventory_usages: 'medicine_inventory_usages',
  medicine_types: 'medicine_types',
  medicines: 'medicines',
  migrations: 'migrations',
  model_has_permissions: 'model_has_permissions',
  model_has_roles: 'model_has_roles',
  notifications: 'notifications',
  patient_medical_record_blood_pressures: 'patient_medical_record_blood_pressures',
  patient_medical_record_documents: 'patient_medical_record_documents',
  patient_medical_record_histories: 'patient_medical_record_histories',
  patient_medical_record_pulse_rates: 'patient_medical_record_pulse_rates',
  patient_medical_record_temperatures: 'patient_medical_record_temperatures',
  patient_medical_record_weights: 'patient_medical_record_weights',
  patient_medical_records: 'patient_medical_records',
  patients: 'patients',
  payment_gateways: 'payment_gateways',
  permissions: 'permissions',
  prescriptions: 'prescriptions',
  prescriptions_medicines: 'prescriptions_medicines',
  purchase_medicines: 'purchase_medicines',
  purchased_medicines: 'purchased_medicines',
  qualifications: 'qualifications',
  reviews: 'reviews',
  roles: 'roles',
  sale_medicines: 'sale_medicines',
  service_categories: 'service_categories',
  service_doctor: 'service_doctor',
  services: 'services',
  session_week_days: 'session_week_days',
  settings: 'settings',
  sliders: 'sliders',
  smart_patient_cards: 'smart_patient_cards',
  specializations: 'specializations',
  states: 'states',
  subscribes: 'subscribes',
  transaction_invoice_receipts: 'transaction_invoice_receipts',
  transaction_invoice_services: 'transaction_invoice_services',
  transaction_invoices: 'transaction_invoices',
  transaction_medical_certificates: 'transaction_medical_certificates',
  transactions: 'transactions',
  units: 'units',
  used_medicines: 'used_medicines',
  user_clinics: 'user_clinics',
  user_google_appointments: 'user_google_appointments',
  user_zoom_credential: 'user_zoom_credential',
  users: 'users',
  visit_notes: 'visit_notes',
  visit_observations: 'visit_observations',
  visit_prescriptions: 'visit_prescriptions',
  visit_problems: 'visit_problems',
  visits: 'visits',
  zoom_o_auth_credentials: 'zoom_o_auth_credentials'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
